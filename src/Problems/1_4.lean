import ncategory_theory.ndefs
open category_theory category_theory.functor function

universes u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ u‚ÇÉ v‚ÇÉ u‚ÇÑ v‚ÇÑ 

--4a Show that any functor F : C ‚•§ D can be factorised as L : C ‚•§ E and R : E ‚•§ D where L is bijective on objects, and R is full and faithful.

structure functor_decomp (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C] (D : Type u‚ÇÇ) [category.{u‚ÇÇ v‚ÇÇ} D] (F: C ‚•§ D) : Type (max u‚ÇÅ v‚ÇÅ u‚ÇÇ v‚ÇÇ+1) :=
    (E : Type u‚ÇÅ)
    (decomp_category : (category.{u‚ÇÅ v‚ÇÇ} E))
    (functor1 : C ‚•§ E)
    (functor2 : E ‚•§ D)
    (biject : bijective(functor1.obj) . obviously)
    (fandf : is_Faithful_Functor functor2 ‚àß is_Full_Functor functor2)

definition canonical_functor_decomp (C : Type u‚ÇÅ) [category.{u‚ÇÅ v‚ÇÅ} C] (D : Type u‚ÇÇ) [category.{u‚ÇÇ v‚ÇÇ} D] (F : C ‚•§ D) : (functor_decomp _ _ F) := 
    {
        E := C,
        decomp_category :=  {
                                hom         := (Œª X Y : C, (F X) ‚ü∂ (F Y)),
                                id          := (Œª X, ùüô(F X)),
                                comp        := (Œª _ _ _ f g, f ‚â´ g),
                                id_comp'    := by simp,
                                comp_id'    := by simp,
                                assoc'      := (Œª _ _ _ _ _ _ _, by simp)
                            },
        functor1 := {
                        obj         := Œª X , X,
                        map'        := Œª _ _ f, F.map f,
                        map_id'     := by simp,
                        map_comp'   := (Œª _ _ _ _ _ , by simp)
                    },
        functor2 := {
                        obj         := Œª X, F X,
                        map'        := Œª _ _ f, f,
                        map_id'     := by simp,
                        map_comp'   := (Œª _ _ _ _ _ , by simp)
                    },
        biject :=   ‚ü®
                        begin
                            simp,
                            unfold function.injective,
                            exact Œª _ _, id
                        end,
                        begin
                            simp,
                            unfold function.surjective,
                            intro,
                            exact ‚ü®b, eq.refl b‚ü©
                        end
                    ‚ü©,
        fandf :=    ‚ü®
                        begin
                            unfold is_Faithful_Functor,
                            simp,
                            intros,
                            trivial
                        end
                    ,
                        begin
                            unfold is_Full_Functor,
                            simp,
                        end
                    ‚ü©
    }

--4b
section
variable {B : Type u‚ÇÅ}
variable [‚Ñ¨ : category.{u‚ÇÅ v‚ÇÅ} B]
variable {C : Type u‚ÇÇ}
variable [ùíû : category.{u‚ÇÇ v‚ÇÇ} C]
variable {D : Type u‚ÇÉ}
variable [ùíü : category.{u‚ÇÉ v‚ÇÉ} D]
variable {E : Type u‚ÇÑ}
variable [‚Ñ∞ : category.{u‚ÇÑ v‚ÇÑ} E]
variables (L : B ‚•§ C) (F : B ‚•§ D) (R : D ‚•§ E) (G : C ‚•§ E)
include ‚Ñ¨ ùíû ùíü ‚Ñ∞


/-noncomputable definition fourb (Linv : C ‚Üí B) (hlinv : left_inverse L.obj Linv) (hrinv : right_inverse L.obj Linv) (hfa : is_Faithful_Functor R) (hfu : is_Full_Functor R) (heq : L ‚ãô G = F ‚ãô R) : C ‚•§ D :=
    {
        obj :=    begin
                            intro Xc,
                            exact F (Linv Xc)
                        end,
        map' :=  begin
                            intros Xc Yc f,
                            exact (classical.indefinite_description _ (hfu (cast 
                                    (calc
                                        (G Xc ‚ü∂ G Yc)    = (G Xc ‚ü∂ G (L Linv Yc)) : by rw hlinv
                                        ...                     = (G (L Linv Xc) ‚ü∂ G (L Linv Yc)) : by rw (hlinv Xc)
                                        ...                     = ((L ‚ãô G) Linv Xc ‚ü∂ (L ‚ãô G) Linv Yc) : by simp
                                        ...                     = ((F ‚ãô R) Linv Xc ‚ü∂ (F ‚ãô R) Linv Yc) : by rw heq
                                        ...                     = (R (F Linv Xc)‚ü∂ R (F Linv Yc)) : by simp) (G.map f) ))).1
                        end,
        identities :=   begin
                            intros,
                            let blegh := (classical.indefinite_description (Œª (f : F Linv X ‚ü∂ F Linv X), R.map f = cast _ (G.map ùüô X)) _),
                            
                        end,
        functoriality :=    begin
                                sorry
                            end
    }
end-/

definition fourb (Linv : C ‚Üí B) (hlinv : left_inverse L.obj Linv) (hrinv : right_inverse L.obj Linv) (Rff : Full_and_Faithful_Functor R) (heq : L ‚ãô G = F ‚ãô R) : C ‚•§ D :=
    {
        obj         :=    Œª Xc, (F (Linv Xc)),
        map'        :=  Œª Xc Yc f, Rff.morinv (cast 
                                    (calc
                                        (G Xc ‚ü∂ G Yc)    = (G Xc ‚ü∂ G (L.obj (Linv Yc))) : by rw hlinv
                                        ...                     = (G (L.obj (Linv Xc)) ‚ü∂ G (L.obj (Linv Yc))) : by rw (hlinv Xc)
                                        ...                     = ((L ‚ãô G) (Linv Xc) ‚ü∂ (L ‚ãô G) (Linv Yc)) : by simp
                                        ...                     = ((F ‚ãô R) (Linv Xc) ‚ü∂ (F ‚ãô R) (Linv Yc)) : by rw heq
                                        ...                     = (R (F (Linv Xc))‚ü∂ R (F (Linv Yc))) : by simp) (G.map f)),
        map_id'     :=   begin
                            intro Xc,
                            sorry
                        end,
        map_comp'   :=    begin
                                intros Xc Yc Zc f g,
                                sorry
                            end
    }
end